git init - comando pra inicializar um repositorio
git add
git commit -m
git branch -M main
git remote add origin - e cola o link do repo
git push -u origin main

# remover uma origin

git remote -v para listar as origens
git remote rm origin para remover a origin

# commits

flag -a adiciona varios arquivos de uma vez
flag -m coloca uma mensagem de commit

# enviar pro github

git push

# Pegar atualizações do repo remoto para a maquina local 

git pull

# clonar repositorio

git clone + link do repositorio

# remover arquivos

git rm + nome 

# ver todas as alterações

git log

# mover ou renomear arquivos

# mover

git mv rodape.css css/rodape.css

# renomear

git mv css/bannerinicia.css css/banner_inicial.css

# retornar o arquivo ao estado original

git checkout

# ignorar arquivos 

criar um arquivo .gitignore e colocar o nome do arquivo dentro dele

# desfazendo todas as alterações

git reset

usar junto com a flag --hard para eliminar todas as alterações incluindo as pendentes

# criando e visualizando branches

git branch para visualizar as disponiveis 

git branch <nome> para criar uma

# deletando branches

git branch -d ou --delete, só se usa se a branch for criada errado

# mudar de branch

git checkout nome da branch

# criar uma branch e mudar pra ela 

git checkout -b nome da branch

# unindo branches

git merge nome da branch a ser unida

# passo a passo do merge:

# modifica o arquivo
git commit 
git checkout branch que ira receber os arquivos
git merge branch que ira passar os arquivos


# resetar o arquivo sem perder totalmente o código

git stash

# ele manda as modificações apagadas para a lixeira

# verificar as stashs criadas

git stash list

# recuperar a stash 

git stash nome  

git stash apply 1

# ver quais foram as alterações da stash

git stash show -p numero da stash

# remover stash

git stash clear

# caso seja uma especifica

git stash drop numero da stash

# Utilizando tags

# tags são utilizadas para demarcar estágios do desenvolvimento de algum recurso
# são uma espécie de checkpoint de um branch

# para criar uma tag se utiliza o comando 

git tag -a <nome> -m "<msg>"

# Verificar e alterar a tag

# Verificar

git show <nome>

# trocar

git checkout <nome>

# enviar tag

git push origin <nome>

# enviar mais de 1 tag

git push origin --tags

# encontrando branches remotos

git fetch 

# adicionar um repo remoto

git remote

git remote add origin <link>

# adicionar um submódulo

git submodule add <repo>

# verificar o submodulo

git submodule

# verificar alterações

git show
git show <tag>

# exibindo diferenças 

git diff

# comparando arquivos

git diff <arquivo><arquivo_b>

# log resumido 

git shortlog

# limpar arquivos que não foram trackeados (não utilizou git add)
# mais utilizados para arquivos gerados automaticamente

git clean

# otimizar o repositório
# identifica arquivos desnecessarios e apaga pra aumentar a performance

git gc

# checar integridade dos arquivos

git fsck

# mapear todos os passos no repositorio
# log mais completo
# ficam salvos até expirar (padrão de 30 dias)

git reflog

# passando o repo para arquivo

git archive --format zip --output main_files.zip main

# alterar com facilidade uma variedade de commits, modificando o histórico do seu repositório. 
# É possível reordenar, editar ou combinar commits por squash

git rebase <atual> <funcionalidade> -i

# nos commits que deseja apagar aperta i e troca pick por squash
squash

# nos commits que deseja renomear aperta i e troca pick por reword
reword

# pra confirmar no insert
:x!

# Boas práticas

# Boas msg de commit

Separar assunto do corpo da msg
assunto com no max 50 caracteres
assunto com letra inicial maiuscula
corpo com no maximo 72 caracteres
explicar o pq e como do commit e nao como o codigo foi escrito
